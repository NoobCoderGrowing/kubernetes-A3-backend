package com.example.accessingDataMysqlApplication;

import io.lettuce.core.RedisClient;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;


@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private RedisClient client;



    @CrossOrigin(origins = "*")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String username
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUsername(username);
        n.setPassword(password);
        userRepository.save(n);
        return "Success";
    }
    @CrossOrigin(origins = "*")
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @CrossOrigin(origins = "*")
    @PostMapping(path="/login")
    public @ResponseBody Boolean login(@RequestParam String username
            , @RequestParam String password) {
        ArrayList<User> users= (ArrayList<User>) userRepository.findAll();
        System.out.println(username);
        for(int i=0;i<users.size();i++){
            if(users.get(i).getUsername().equals(username)&&users.get(i).getPassword().equals(password)){
                return true;
            }
        }
        return false;
    }

//convert to User object using @RequestBody
//    @CrossOrigin(origins = "*")
//    @PostMapping(path="/login")
//    public @ResponseBody Boolean login(@RequestBody User user) {
//        System.out.println(user.getUsername());
//        return false;
//    }
    @CrossOrigin(origins = "*")
    @GetMapping(path="/hello")
    public @ResponseBody String hello() {
        return "hello world";
    }

    @CrossOrigin(origins = "*")
    @GetMapping("/count")
    public synchronized @ResponseBody
    HashMap addCount(@RequestParam String count) {
        StatefulRedisConnection<String, String> connection = client.connect();
        RedisCommands<String, String> commands = connection.sync();
        HashMap<Integer,String> result=new HashMap<>();
        String value=commands.get("count");
        int intValue=Integer.parseInt(value);
        int intCount=Integer.parseInt(count);

        if(intValue==20){
            commands.set("count","0");
            result.put(0,"ongoing");
            return result;
        }

        if(intCount>intValue&&intValue<20){
            commands.set("count",count);
            intValue=Integer.parseInt(commands.get("count"));
            if(intValue==20){
                commands.set("count","20");
                result.put(20,"win");
                return result;
            }
            result.put(intValue,"ongoing");
            return result;
        }else if(intCount<intValue&&intValue<20){
            result.put(intValue,"ongoing");
            return result;
        }

        connection.close();
        result.put(intCount,"ongoing");
        return result;
    }

    @CrossOrigin(origins = "*")
    @GetMapping("/setCount")
    public void setCount() {
        StatefulRedisConnection<String, String> connection = client.connect();
        RedisCommands<String, String> commands = connection.sync();
        commands.set("count","0");
        connection.close();
    }

}